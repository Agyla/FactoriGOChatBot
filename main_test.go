package main

import (
	"reflect"
	"testing"
)

func Test_parseAndFormatMessage(t *testing.T) {
	type args struct {
		message string
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{"JOIN", args{message: "2022-02-01 15:31:19 [JOIN] Mattie joined the game"}, ":green_circle: | `Mattie` joined the game!"},
		{"LEAVE", args{message: "2022-02-01 15:31:30 [LEAVE] Mattie left the game"}, ":red_circle: | `Mattie` left the game!"},
		{"CHAT", args{message: "2022-02-01 15:31:30 [CHAT] Mattie: Some chat message"}, ":speech_left: | `Mattie`: Some chat message"},
		// Messages below are generated by the companion mod, but I still want them to go through the normal flow!
		{"PLAYER_DIED", args{message: "[FactoriGOChatBot]: \"2852569 [PLAYER_DIED:Mattie]\""}, ":skull: | Player died: `Mattie` (unknown cause)"},
		{"PLAYER_DIED_CAUSE", args{message: "[FactoriGOChatBot]: \"2852569 [PLAYER_DIED:Mattie:locomotive]\""}, ":skull: | Player died: `Mattie`, cause: `locomotive`"},
		{"PLAYER_DIED_CAUSE2", args{message: "[FactoriGOChatBot]: \"2852569 [PLAYER_DIED:Mattie:big worm]\""}, ":skull: | Player died: `Mattie`, cause: `big worm`"},
		{"RESEARCH_STARTED", args{message: "[FactoriGOChatBot]: \"3045105 [RESEARCH_STARTED:nuclear-power]\""}, ":microscope: | Research started: `nuclear-power`"},
		{"RESEARCH_FINISHED", args{message: "[FactoriGOChatBot]: \"3229214 [RESEARCH_FINISHED:nuclear-power]\""}, ":microscope: | Research finished: `nuclear-power`"},
		// Corrupted messages (as I don't know yet how to fix the file read, so it will have a single line guaranteed
		{"CORRUPT", args{message: "[FactoriGOChatBot]: \"2852569 [foobar]\""}, ""},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := parseAndFormatMessage(tt.args.message); got != tt.want {
				t.Errorf("parseAndFormatMessage() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_parseDiscordMessage(t *testing.T) {
	type args struct {
		message string
	}
	tests := []struct {
		name string
		args args
		want []string
	}{
		{"Normal chat", args{message: "test"}, []string{"test"}},
		{"Wave emoji", args{message: "ðŸ‘‹"}, []string{"**waving-hand**"}},
		{"Sweat", args{message: "ðŸ˜“"}, []string{"**downcast-face-with-sweat**"}},
		{"Grin", args{message: "ðŸ˜€"}, []string{"**grinning-face**"}},
		{"Smile (but slightly)", args{message: "ðŸ™‚"}, []string{"**slightly-smiling-face**"}},
		{"Cool guy", args{message: "ðŸ˜Ž"}, []string{"**smiling-face-with-sunglasses**"}},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := parseDiscordMessage(tt.args.message); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("parseDiscordMessage() = %v, want %v", got, tt.want)
			}
		})
	}
}
